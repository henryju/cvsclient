# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#--------------------------------------------------------------------
# ResourceBundle properties file

#NOI18N
add.usage=add [-k rcs-kflag] [-m message] files...
#NOI18N
add.shortDescription=Add a new file/directory to the repository.
#NOI18N
add.longDescription=Usage: {0}\n\
\        -k      Use "rcs-kflag" to add the file with the specified kflag.\n\
\        -m      Use "message" for the creation log.

#NOI18N
annotate.usage=annotate [-lRf] [-r rev|-D date] [files...]
#NOI18N
annotate.shortDescription=Show the last revision where each source line was modified.
#NOI18N
annotate.longDescription=Usage: {0}\n\
\        -l      Local directory only, no recursion.\
\        -R      Process directories recursively.\
\        -f      Use head revision if tag/date not found.\
\        -r rev  Annotate file as of specified revision/tag.\
\        -D date Annotate file as of specified date.

#NOI18N
checkout.usage=checkout [-ANPRcflnps] [-r rev | -D date] [-d dir] [-j rev1] [-j rev2] [-k kopt] modules...
#NOI18N
checkout.shortDescription=Check out the sources from repository to local working directory.
#NOI18N
checkout.longDescription=Usage: {0}\n\
\        -A      Reset any sticky tags/date/kopts.\n\
\        -N      Don't shorten module paths if -d specified.\n\
\        -P      Prune empty directories.\n\
\        -R      Process directories recursively.\n\
\        -c      "cat" the module database.\n\
\        -f      Force a head revision match if tag/date not found.\n\
\        -l      Local directory only, not recursive\n\
\        -n      Do not run module program (if any).\n\
\        -p      Check out files to standard output (avoids stickiness).\n\
\        -s      Like -c, but include module status.\n\
\        -r rev  Check out revision or tag. (implies -P) (is sticky)\n\
\        -D date Check out revisions as of date. (implies -P) (is sticky)\n\
\        -d dir  Check out into dir instead of module name.\n\
\        -k kopt Use RCS kopt -k option on checkout.\n\
\        -j rev  Merge in changes made between current revision and rev.

#NOI18N
commit.usage=commit [-nRlf] [-m msg | -F logfile] [-r rev] files...
#NOI18N
commit.shortDescription=Check files into the repository.
#NOI18N
commit.longDescription=Usage: {0}\n\
\        -n      Do not run the module program (if any).\n\
\        -R      Process directories recursively.\n\
\        -l      Local directory only (not recursive).\n\
\        -f      Force the file to be committed; disables recursion.\n\
\        -F file Read the log message from file.\n\
\        -m msg  Log message.\n\
\        -r rev  Commit to this branch or trunk revision.

#NOI18N
commit.messageNotSpecified=The message was not specified. Please use -m or -F options.

#NOI18N
diff.usage=diff [-lNR] [rcsdiff-options] [[-r rev1 | -D date1] [-r rev2 | -D date2]] [files...] 
#NOI18N
diff.shortDescription=Show differences between local file and a revision, or between two revisions.
#NOI18N
diff.longDescription=Usage: {0}\n\
\        -l      Local directory only, not recursive\n\
\        -R      Process directories recursively.\n\
\        -D d1   Diff revision for date against working file.\n\
\        -D d2   Diff rev1/date1 against date2.\n\
\        -N      include diffs for added and removed files.\n\
\        -r rev1 Diff revision for rev1 against working file.\n\
\        -r rev2 Diff rev1/date1 against rev2.\n\
\        --ifdef=arg     Output diffs in ifdef format.\n\
(consult the documentation for the CVS server diff program for rcsdiff-options.\n\
The most popular is -c for context diffs but there are many more).

#NOI18N
export.usage=export [-NPRfln] [-r rev | -D date] [-d dir] [-k kopt] module...
#NOI18N
export.shortDescription=Export sources from CVS, without administrative files.
#NOI18N
export.longDescription=Usage: {0}\n\
\        -N      Don't shorten module paths if -d specified.\n\
\        -f      Force a head revision match if tag/date not found.\n\
\        -l      Local directory only, not recursive.\n\
\        -R      Process directories recursively (default).\n\
\        -P      Prune empty directories.\n\
\        -n      Do not run module program (if any).\n\
\        -r rev  Export revision or tag.\n\
\        -D date Export revisions as of date.\n\
\        -d dir  Export into dir instead of module name.\n\
\        -k kopt Use RCS kopt -k option on checkout.\n

#NOI18N
export.Msg_NeedTagOrDate=must specify a tag or date

#NOI18N
import.usage=import [-d] [-k subst] [-I ign] [-m msg] [-b branch] [-W spec] repository vendor-tag release-tags...
#NOI18N
import.shortDescription=Import sources into CVS repository, using a vendor branch.
#NOI18N
import.longDescription=Usage: {0}\n\
\      -d        Use the file's modification time as the time of import.\n\
\      -k sub    Set default RCS keyword substitution mode.\n\
\      -I ign    More files to ignore (! to reset).\n\
\      -b bra    Vendor branch id.\n\
\      -m msg    Log message.\n\
\      -W spec   Wrappers specification line.

#NOI18N
locbundlecheck.usage=locbundlecheck -i <localization> [<other annotate switches>] [files...]
#NOI18N
locbundlecheck.shortDescription=Detect what bundle keys need to be updated in localized resource bundles.
#NOI18N
locbundlecheck.longDescription=Usage: {0}\n\
\      -i locale The locale to check\n\
(all switches that can be applied to annotate can be specified here as well).

#NOI18N
locbundlecheck.no_file_spec=no files specified
#NOI18N
locbundlecheck.illegal_state=illegal state
#NOI18N
locbundlecheck.noLocalizedFile=File {0} doesn't have a localized counterpart.
#NOI18N
locbundlecheck.File=File {0}
#NOI18N
locbundlecheck.propMissing=\ \ \ Property \"{0}\" doesn't exist in localized file.
#NOI18N
locbundlecheck.prop_updated=\ \ \ Property \"{0}\" was updated in the original file.
#NOI18N
locbundlecheck.prop_removed=\ \ \ Property \"{0}\" was removed from original file.

#NOI18N
log.usage=log [-lRbhtN] [-d <dates>] [-r <revisions>] [-s <states>] [-w[logins]] [files...]
#NOI18N
log.shortDescription=Print out history information for files
#NOI18N
log.longDescription=Usage: {0}\n\
\        -l      Local directory only, no recursion.\n\
\        -R      Only print name of RCS file.\n\
\        -h      Only print header.\n\
\        -t      Only print header and descriptive text.\n\
\        -N      Do not list tags.\n\
\        -b      Only list revisions on the default branch.\n\
\        -r[revisions]   Specify revision(s)s to list.\n\
\        -d dates        Specify dates (D1<D2 for range, D for latest before).\n\
\        -s states       Only list revisions with specified states.\n\
\        -w[logins]      Only list revisions checked in by specified logins.

#NOI18N
rannotate.usage=rannotate [-lRf] [-r rev|-D date] files...
#NOI18N
rannotate.shortDescription=Show the last revision where each source line in repository was modified.
#NOI18N
rannotate.longDescription=Usage: {0}\n\
Like annotate, but acts directly on files in repository, does not operate on check out sources.\
\        -l      Local directory only, no recursion.\
\        -R      Process directories recursively.\
\        -f      Use head revision if tag/date not found.\
\        -r rev  Annotate file as of specified revision/tag.\
\        -D date Annotate file as of specified date.

#NOI18N
remove.usage=remove [-lRf] [files...]
#NOI18N
remove.shortDescription=Remove a file from the repository
#NOI18N
remove.longDescription=Usage: {0}\n\
\        -f      Delete the file before removing it.\n\
\        -l      Process this directory only (not recursive).\n\
\        -R      Process directories recursively.


#NOI18N
rlog.usage=rlog [-lRbhtN] [-d <dates>] [-r <revisions>] [-s <states>] [-w[logins]] files...
#NOI18N
rlog.shortDescription=Print out history information for files
#NOI18N
rlog.longDescription=Usage: {0}\n\
Like log, but acts directly on files in repository, does not operate on check out sources.\
\        -l      Local directory only, no recursion.\n\
\        -R      Only print name of RCS file.\n\
\        -h      Only print header.\n\
\        -t      Only print header and descriptive text.\n\
\        -N      Do not list tags.\n\
\        -b      Only list revisions on the default branch.\n\
\        -r[revisions]   Specify revision(s)s to list.\n\
\        -d dates        Specify dates (D1<D2 for range, D for latest before).\n\
\        -s states       Only list revisions with specified states.\n\
\        -w[logins]      Only list revisions checked in by specified logins.

#NOI18N
status.usage=status [-lRv] [files...]
#NOI18N
status.shortDescription=Display status information on checked out files
#NOI18N
status.longDescription=Usage: {0}\n\
\        -v      Verbose format; includes tag information for the file\n\
\        -l      Process this directory only (not recursive).\n\
\        -R      Process directories recursively.


#NOI18N
tag.usage=tag [-bcdFflR] [-r rev|-D date] tag_name [files...]
#NOI18N
tag.shortDescription=Add a symbolic tag to checked out version of files
#NOI18N
tag.longDescription=Usage: {0}\n\
\        -b      Make the tag a "branch" tag, allowing concurrent development.\n\
\        -c      Check that working files are unmodified.\n\
\        -d      Delete the given tag.\n\
\        -F      Move tag if it already exists.\n\
\        -f      Force a head revision match if tag/date not found.\n\
\        -l      Local directory only, not recursive.\n\
\        -R      Process directories recursively.\n\
\        -r rev  Existing revision/tag.\n\
\        -D date Existing date.

#NOI18N
rtag.usage=rtag [-abdFflRn] [-r rev|-D date] tag_name [modules...]
#NOI18N
rtag.shortDescription=Add a symbolic tag to checked out version of files
#NOI18N
rtag.longDescription=Usage: {0}\n\
\        -b      Make the tag a "branch" tag, allowing concurrent development.\n\
\        -c      Check that working files are unmodified.\n\
\        -d      Delete the given tag.\n\
\        -F      Move tag if it already exists.\n\
\        -f      Force a head revision match if tag/date not found.\n\
\        -l      Local directory only, not recursive.\n\
\        -R      Process directories recursively.\n\
\        -r rev  Existing revision/tag.\n\
\        -D date Existing date.

#NOI18N
update.usage=update [-APdflRp] [-k kopt] [-r rev|-D date] [-j rev] [-I ign] [-W spec] [files...]
#NOI18N
update.shortDescription=Bring working directory in sync with repository
#NOI18N
update.longDescription=Usage: {0}\n\
\        -A      Reset any sticky tags/date/kopts.\n\
\        -P      Prune empty directories.\n\
\        -C      Overwrite locally modified files with clean repository copies.\n\
\        -d      Build directories, like checkout does.\n\
\        -f      Force a head revision match if tag/date not found.\n\
\        -l      Local directory only, no recursion.\n\
\        -R      Process directories recursively.\n\
\        -p      Send updates to standard output (avoids stickiness).\n\
\        -k kopt Use RCS kopt -k option on checkout.\n\
\        -r rev  Update using specified revision/tag (is sticky).\n\
\        -D date Set date to update from (is sticky).\n\
\        -j rev  Merge in changes made between current revision and rev.\n\
\        -I ign  More files to ignore (! to reset).\n\
\        -W spec Wrappers specification line.
